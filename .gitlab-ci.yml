###################
# Global Settings #
###################

stages:
  - static_analysis
  - build_n_test

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  SINGULARITY_EOS_GCC_VERSION: "9.3.0"
  SINGULARITY_EOS_OPENMPI_VERSION: "4.1.3"
  SINGULARITY_EOS_TEMP_SPACK_VERSION: ""
  SINGULARITY_EOS_TEMP_SPACK_DIR: ""
  SINGULARITY_EOS_SPACK_SPEC: "singularity-eos@main+mpi+python+tests%gcc@${SINGULARITY_EOS_GCC_VERSION} ^openmpi@${SINGULARITY_EOS_OPENMPI_VERSION}"

before_script:
  - export HOME=${CI_PROJECT_DIR}
  - export SPACK_DISABLE_LOCAL_CONFIG=true
  - export SPACK_USER_CACHE_PATH=/tmp/spack-local
  - cd ${CI_PROJECT_DIR}
  - unset SPACK_ROOT
  - export SINGULARITY_EOS_SPACK_VERSION=$([ -z "$SINGULARITY_EOS_TEMP_SPACK_VERSION" ] && echo $XCAP_OSS_SPACK_REF || echo $SINGULARITY_EOS_TEMP_SPACK_VERSION)
  - export SINGULARITY_EOS_SPACK_DIR=${SINGULARITY_EOS_TEMP_SPACK_DIR:=$XCAP_OSS_SPACK_DIR}
  - echo "Spack Version:" ${SINGULARITY_EOS_SPACK_VERSION}
  - git clone https://github.com/spack/spack.git
  - cd spack && git checkout ${SINGULARITY_EOS_SPACK_VERSION##*-} && cd ${CI_PROJECT_DIR}
  - export SPACK_ARCH=`${CI_PROJECT_DIR}/spack/bin/spack arch` && echo ${SPACK_ARCH}
  - export PLATFORM="${SPACK_ARCH%%-*}" && echo ${PLATFORM}
  - mkdir -p ${CI_PROJECT_DIR}/spack/etc/spack/${PLATFORM}
  - cp ${SINGULARITY_EOS_SPACK_DIR}/etc/spack/*.yaml ${CI_PROJECT_DIR}/spack/etc/spack/
  - cp ${CI_PROJECT_DIR}/.gitlab-ci/config/spack/*.yaml ${CI_PROJECT_DIR}/spack/etc/spack/
  - sed -i "s;XCAP_OSS_SPACK_DIR_TMP;${SINGULARITY_EOS_SPACK_DIR};g" "${CI_PROJECT_DIR}/spack/etc/spack/upstreams.yaml"
  - rm ${CI_PROJECT_DIR}/spack/etc/spack/repos.yaml ${CI_PROJECT_DIR}/spack/etc/spack/packages.yaml
  - cp ${SINGULARITY_EOS_SPACK_DIR}/etc/spack/${PLATFORM}/*.yaml ${CI_PROJECT_DIR}/spack/etc/spack/${PLATFORM}/
  - source ${CI_PROJECT_DIR}/spack/share/spack/setup-env.sh
  - spack compiler list
  - spack repo add --scope site ${CI_PROJECT_DIR}/spack-repo
  - spack repo list
  - mkdir -p ${CI_PROJECT_DIR}/spack_env
  - spack env create --without-view -d ${CI_PROJECT_DIR}/spack_env
  - spack env activate -d ${CI_PROJECT_DIR}/spack_env

##########################
# Build Matrix Variables #
##########################

.buildtype_debug: &buildtype_debug
  BUILD_TYPE: "Debug"

.buildtype_release: &buildtype_release
  BUILD_TYPE: "Release"

.gpu: &gpu
  SINGULARITY_USE_CUDA: "true"
  SINGULARITY_EOS_SPACK_SPEC: "singularity-eos@main+mpi+tests+cuda+kokkos cuda_arch=70 +kokkos-kernels%gcc@${SINGULARITY_EOS_GCC_VERSION} ^cuda@11.4.2 ^openmpi@${SINGULARITY_EOS_OPENMPI_VERSION}"

.fort: &fort
  SINGULARITY_USE_FORTRAN: "true"

.nofort: &nofort
  SINGULARITY_USE_FORTRAN: "false"

.skylake: &skylake
    SCHEDULER_PARAMETERS: "--nodes=1 --partition=skylake-gold,skylake-platinum"

.power9: &power9
    SCHEDULER_PARAMETERS: "--nodes=1 --partition=power9"

.x86volta: &x86volta
    SCHEDULER_PARAMETERS: "--nodes=1 --partition=volta-x86 -C cpu_family:haswell"

.python: &python
    SINGULARITY_BUILD_PYTHON: "ON"

#################
# General Setup #
#################

.job: &job_def
  tags:
    - darwin-slurm-shared
  variables:
    SCHEDULER_PARAMETERS: "--nodes=1 --partition=skylake-gold,skylake-platinum"
  only:
    refs:
      - main
      - merge_requests
  except:
    refs:

.artifacts: &artifacts_def
  artifacts:
    name: "singularity-eos-${CI_COMMIT_REF_SLUG}-${CI_JOB_NAME}-${CI_JOB_ID}"
    paths:
      - ${CI_PROJECT_DIR}/build
      - ${CI_PROJECT_DIR}/spack
      - ${CI_PROJECT_DIR}/spack_env
    when: always
    expire_in: 3 hours
  dependencies: []

#######################
# Job Script Template #
#######################

.clang-format:
  stage: static_analysis
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - cd ${CI_PROJECT_DIR}
    - spack install --show-log-on-error --no-checksum --yes-to-all singularity-eos+mpi+format%gcc@${SINGULARITY_EOS_GCC_VERSION}^openmpi@${SINGULARITY_EOS_OPENMPI_VERSION}
    - spack module tcl refresh -y
    - spack env loads -r -x singularity-eos
    - source ${CI_PROJECT_DIR}/spack/share/spack/setup-env.sh
    - source ${CI_PROJECT_DIR}/spack_env/loads
    - clang-format -version
    - find ${CI_PROJECT_DIR} -regex '.*\.\(cpp\|hpp\)' | xargs clang-format -style=file -i && git diff --exit-code --ignore-submodules

.sphinx-doc:
  stage: static_analysis
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - spack install --show-log-on-error --no-checksum --yes-to-all singularity-eos+python+mpi+doc%gcc@${SINGULARITY_EOS_GCC_VERSION}^openmpi@${SINGULARITY_EOS_OPENMPI_VERSION}
    - spack module tcl refresh -y
    - spack env loads -r -x singularity-eos
    - source ${CI_PROJECT_DIR}/spack/share/spack/setup-env.sh
    - source ${CI_PROJECT_DIR}/spack_env/loads
    - cd ${CI_PROJECT_DIR}/doc/sphinx
    - make html
    - rm -rf ${CI_PROJECT_DIR}/public
    - mv _build/html ${CI_PROJECT_DIR}/public

.test:
  stage: build_n_test
  extends:
    - .job
  script:
    - spack spec -I ${SINGULARITY_EOS_SPACK_SPEC}
    - spack dev-build -j $(nproc) -q ${SINGULARITY_EOS_SPACK_SPEC} || ( cat spack-build-out.txt && exit 1 )
    - export SINGULARITY_EOS_CMD="spack install --show-log-on-error --no-checksum --yes-to-all ${SINGULARITY_EOS_SPACK_SPEC}"
    - ( echo "$SINGULARITY_EOS_CMD" && $SINGULARITY_EOS_CMD )
    - spack module tcl refresh -y
    - spack env loads -r -x singularity-eos
    - source ${CI_PROJECT_DIR}/spack/share/spack/setup-env.sh
    - export modName="${CI_PROJECT_DIR}/spack_env/loads"
    - sed -i "1s;^;module load gcc/${SINGULARITY_EOS_GCC_VERSION}\n;" ${modName}
    - sed -i "1s;^;#%Module\n;" ${modName}
    - source ${CI_PROJECT_DIR}/spack_env/loads # module load compiler, deps, etc.
    - module list
    - |
      if [[ -n ${SINGULARITY_USE_CUDA} ]];
      then
        export SINGULARITY_NVCC_WRAPPER="$(which nvcc_wrapper)";
        export SINGULARITY_CMAKE_CXX_COMPILER_FLAG="-DCMAKE_CXX_COMPILER=${SINGULARITY_NVCC_WRAPPER}";
        echo "passing '${SINGULARITY_CMAKE_CXX_COMPILER_FLAG}' to cmake"
      fi
    - mkdir -p build install
    - cd build
    - |
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/install ${SINGULARITY_CMAKE_CXX_COMPILER_FLAG} \
            -DSINGULARITY_USE_EOSPAC=ON \
            -DSINGULARITY_USE_HDF5=ON \
            -DSINGULARITY_BUILD_SESAME2SPINER=ON \
            -DSINGULARITY_BUILD_STELLARCOLLAPSE2SPINER=ON \
            -DSINGULARITY_BUILD_PYTHON=${SINGULARITY_BUILD_PYTHON:-OFF} \
            -DSINGULARITY_BUILD_TESTS=ON \
            -DSINGULARITY_TEST_SESAME=ON \
            -DSINGULARITY_TEST_STELLAR_COLLAPSE=ON \
            -DSINGULARITY_TEST_PYTHON=${SINGULARITY_BUILD_PYTHON:-OFF} \
            -DSINGULARITY_USE_CUDA=${SINGULARITY_USE_CUDA:-OFF} \
            -DSINGULARITY_USE_KOKKOS=${SINGULARITY_USE_CUDA:-OFF} \
            -DSINGULARITY_USE_KOKKOSKERNELS=${SINGULARITY_USE_CUDA:-OFF} \
            -DSINGULARITY_USE_FORTRAN=${SINGULARITY_USE_FORTRAN:-OFF} \
            ..
    - make -j $(nproc) || make VERBOSE=1
    - |
      if [[ ${CI_JOB_NAME} =~ "install" ]];
      then
        make install;
      else
        ./sesame2spiner/sesame2spiner -s materials.sp5 ../sesame2spiner/examples/unit_tests/*.dat;
        ./sesame2spiner/sesame2spiner -s duplicates.sp5 ../sesame2spiner/examples/duplicate-test/*.dat;
        make CTEST_OUTPUT_ON_FAILURE=1 test;
      fi

########
# Jobs #
########

format:
  <<: *job_def
  extends: .clang-format
  allow_failure: true

pages_check:
  <<: *job_def
  extends: .sphinx-doc
  only:
    refs:
      - merge_requests
      - pipelines
  except:

pages:
  <<: *job_def
  extends: .sphinx-doc
  artifacts:
    paths:
      - public
  only:
    refs:
      - main
  except:
    refs:
      - pipelines

test_gnu_skylake:
  <<: *job_def
  extends: .test
  variables:
    <<: *skylake
    <<: *python

test_gnu_power9:
  <<: *job_def
  extends: .test
  variables:
    <<: *power9
    <<: *python

test_gnu_power9_gpu:
  <<: *job_def
  extends: .test
  variables:    
    <<: *power9
    <<: *gpu

test_x86_volta_gpu:
  <<: *job_def
  extends: .test
  variables:    
    <<: *x86volta
    <<: *gpu

install_gnu_skylake_fort:
  <<: *job_def
  extends: .test
  variables:
    <<: *skylake
    <<: *python
    <<: *fort

install_gnu_skylake_nofort:
  <<: *job_def
  extends: .test
  variables:
    <<: *skylake
    <<: *python
    <<: *nofort
